install.packages("pathfindR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("pathview", version = "3.8")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("pathview", version = "3.8")
library(pathview)
library(pathview)
install.packages("pathfindR")
library("pathfindR")
install.packages("knitr")
library("pathfindR")
library("pathfindR")
data("RA_input")
knitr::kable(head(RA_input))
RA_output <- run_pathfindR(RA_input)
knitr::kable(head(RA_output, 2))
View(RA_output)
RA_clustered <- cluster_pathways(RA_output)
View(RA_clustered)
knitr::kable(RA_clustered[RA_clustered$Status == "Representative", ])
RA_clustered <- cluster_pathways(RA_output, plot_hmap = TRUE, plot_clusters_graph = FALSE)
RA_clustered <- cluster_pathways(RA_output, plot_dend = TRUE, plot_clusters_graph = FALSE)
RA_clustered <- cluster_pathways(RA_output, hclu_method = "centroid")
RA_clustered <- cluster_pathways(RA_output, method = "fuzzy")
pws_table <- pathfindR::RA_clustered
View(pws_table)
pws_table <- pws_table[pws_table$Status == "Representative", ]
exp_mat <- pathfindR::RA_exp_mat
View(exp_mat)
cases <- c("GSM389703", "GSM389704", "GSM389706", "GSM389708",
"GSM389711", "GSM389714", "GSM389716", "GSM389717",
"GSM389719", "GSM389721", "GSM389722", "GSM389724",
"GSM389726", "GSM389727", "GSM389730", "GSM389731",
"GSM389733", "GSM389735")
score_matrix <- calculate_pw_scores(pws_table, exp_mat, cases)
library("DESeq2")
library(genefilter)
library('plyr') #package pour table de comptage
library(magrittr)
library("varhandle")
data_API = read.csv("/home/safia/Documents/AYA/Leucegene risk complete.txt",header = T,sep = "\t")
data_API<- data.frame(data_API[,-1], row.names=data_API[,1])
t_data_API = as.data.frame(t(data_API)) # inverse colonne ligne
colnames(t_data_API) <- gsub(" ","_",colnames(t_data_API)) # remplace les espaces dans le nom des colonnes
t_data_API <- head(t_data_API, -1) # supprimme la deriniere ligne data_type
inf_40 = t_data_API[which(as.integer(t_data_API$Age_at_diagnosis)<=40),]
data_AYA = inf_40[which(as.integer(inf_40$Age_at_diagnosis)>=18),]
adverse = row.names(data_AYA[which(unfactor(data_AYA$cytogenetic_risk)=="adverse cytogenetics"),])
API_Adv = data_AYA[which(rownames(data_AYA) %in% adverse),]
count_Adv_subgroup = count(API_Adv, "cytogenetic_subgroup")
complex = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[1]),])
mll = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[3]),])
m5_m7 = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[4]),])
m17 = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[5]),])
t6_9 = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[6]),])
read_count = read.table("/home/safia/Documents/AYA/genes_readcount.annotated.xls", header = T, sep="\t")
read_count<- data.frame(read_count[,-1], row.names=read_count[,1])
read_count = read_count[-c(1:4),]
read_count = read_count[,-c(582:585)]
names(read_count) = substring(names(read_count),8)
library("tidyr")
library("dplyr")
library("ggplot2")
mll = substring(mll,2)
count_mll = read_count[,mll]
colnames(count_mll) = paste("MLL", colnames(count_mll), sep = "_")
complex = substring(complex,2)
count_complex = read_count[,complex]
colnames(count_complex) = paste("Cpx", colnames(count_complex), sep = "_")
m5_m7 = substring(m5_m7,2)
count_m5_m7 = read_count[,m5_m7]
colnames(count_m5_m7) = paste("M57", colnames(count_m5_m7), sep = "_")
t6_9 = substring(t6_9,2)
count_t6_9 = read_count[,t6_9]
colnames(count_t6_9) = paste("t69", colnames(count_t6_9), sep = "_")
df_IF = cbind(count_complex,count_mll,count_m5_m7,count_t6_9)
samples_IF <- data.frame(groups = substr(colnames(df_IF), 1, 3))
ds_IF <- DESeqDataSetFromMatrix(countData=df_IF, colData=samples_IF, design=~groups)
colnames(ds_IF) <- colnames(counts)
ds_IF <-DESeq(ds_IF)
res_IF <- results(ds_IF)
res <- results(ds_IF, tidy=TRUE) %>%
arrange(padj, pvalue) %>%
tbl_df()
head(res)
goi <- res$row[1:9]
stopifnot(all(goi %in% names(ds_IF)))
tcounts <- t(log2((counts(ds_IF[goi, ], normalized=TRUE, replaced=FALSE)+.5))) %>%
merge(colData(ds_IF), ., by="row.names") %>%
gather(gene, expression, (ncol(.)-length(goi)+1):ncol(.))
head(tcounts)
library('biomaRt')
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
genes <- tcounts$gene
genes <- gsub("\\..*","",genes )
G_list <- getBM(filters= "ensembl_gene_id", attributes= c("ensembl_gene_id",
"hgnc_symbol"),values=genes,mart= mart)
for (i in 1:length(genes)){
if (genes[i] %in% G_list$ensembl_gene_id){
a = G_list[G_list$ensembl_gene_id == genes[i],]$hgnc_symbol
if (a != ""){
tcounts$gene[i] = a
}
}
}
ggplot(tcounts, aes(groups, expression, fill=groups)) +
geom_boxplot() +
facet_wrap(~gene, scales="free_y") +
labs(x="Cytogenetic risk",
y="Expression (log normalized counts)",
fill="Cytogenetic risk",
title="Top 9 Results")
library("DESeq2")
library(genefilter)
library('plyr') #package pour table de comptage
library(magrittr)
library("varhandle")
data_API = read.csv("/home/safia/Documents/AYA/Leucegene risk complete.txt",header = T,sep = "\t")
data_API<- data.frame(data_API[,-1], row.names=data_API[,1])
t_data_API = as.data.frame(t(data_API)) # inverse colonne ligne
colnames(t_data_API) <- gsub(" ","_",colnames(t_data_API)) # remplace les espaces dans le nom des colonnes
t_data_API <- head(t_data_API, -1) # supprimme la deriniere ligne data_type
inf_40 = t_data_API[which(as.integer(t_data_API$Age_at_diagnosis)<=40),]
data_AYA = inf_40[which(as.integer(inf_40$Age_at_diagnosis)>=18),]
adverse = row.names(data_AYA[which(unfactor(data_AYA$cytogenetic_risk)=="adverse cytogenetics"),])
API_Adv = data_AYA[which(rownames(data_AYA) %in% adverse),]
count_Adv_subgroup = count(API_Adv, "cytogenetic_subgroup")
complex = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[1]),])
mll = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[3]),])
m5_m7 = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[4]),])
m17 = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[5]),])
t6_9 = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[6]),])
read_count = read.table("/home/safia/Documents/AYA/genes_readcount.annotated.xls", header = T, sep="\t")
read_count<- data.frame(read_count[,-1], row.names=read_count[,1])
read_count = read_count[-c(1:4),]
read_count = read_count[,-c(582:585)]
names(read_count) = substring(names(read_count),8)
library("tidyr")
library("dplyr")
library("ggplot2")
mll = substring(mll,2)
count_mll = read_count[,mll]
colnames(count_mll) = paste("MLL", colnames(count_mll), sep = "_")
complex = substring(complex,2)
count_complex = read_count[,complex]
colnames(count_complex) = paste("Cpx", colnames(count_complex), sep = "_")
m5_m7 = substring(m5_m7,2)
count_m5_m7 = read_count[,m5_m7]
colnames(count_m5_m7) = paste("M57", colnames(count_m5_m7), sep = "_")
t6_9 = substring(t6_9,2)
count_t6_9 = read_count[,t6_9]
colnames(count_t6_9) = paste("t69", colnames(count_t6_9), sep = "_")
df_IF = cbind(count_complex,count_mll,count_m5_m7,count_t6_9)
samples_IF <- data.frame(groups = substr(colnames(df_IF), 1, 3))
ds_IF <- DESeqDataSetFromMatrix(countData=df_IF, colData=samples_IF, design=~groups)
colnames(ds_IF) <- colnames(counts)
ds_IF <-DESeq(ds_IF)
res_IF <- results(ds_IF)
res <- results(ds_IF, tidy=TRUE) %>%
arrange(padj, pvalue) %>%
tbl_df()
head(res)
goi <- res$row[1:9]
stopifnot(all(goi %in% names(ds_IF)))
tcounts <- t(log2((counts(ds_IF[goi, ], normalized=TRUE, replaced=FALSE)+.5))) %>%
merge(colData(ds_IF), ., by="row.names") %>%
gather(gene, expression, (ncol(.)-length(goi)+1):ncol(.))
head(tcounts)
library('biomaRt')
mart <- useDataset("hsapiens_gene_ensembl", useMart("ensembl"))
library("DESeq2")
library(genefilter)
library('plyr') #package pour table de comptage
library(magrittr)
library("varhandle")
data_API = read.csv("/home/safia/Documents/AYA/Leucegene risk complete.txt",header = T,sep = "\t")
data_API<- data.frame(data_API[,-1], row.names=data_API[,1])
t_data_API = as.data.frame(t(data_API)) # inverse colonne ligne
colnames(t_data_API) <- gsub(" ","_",colnames(t_data_API)) # remplace les espaces dans le nom des colonnes
t_data_API <- head(t_data_API, -1) # supprimme la deriniere ligne data_type
inf_40 = t_data_API[which(as.integer(t_data_API$Age_at_diagnosis)<=40),]
data_AYA = inf_40[which(as.integer(inf_40$Age_at_diagnosis)>=18),]
adverse = row.names(data_AYA[which(unfactor(data_AYA$cytogenetic_risk)=="adverse cytogenetics"),])
API_Adv = data_AYA[which(rownames(data_AYA) %in% adverse),]
count_Adv_subgroup = count(API_Adv, "cytogenetic_subgroup")
complex = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[1]),])
mll = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[3]),])
m5_m7 = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[4]),])
m17 = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[5]),])
t6_9 = row.names(API_Adv[which(unfactor(API_Adv$cytogenetic_subgroup)==count_Adv_subgroup$cytogenetic_subgroup[6]),])
View(count_Adv_subgroup)
